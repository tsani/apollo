#!/bin/bash

# synopsis: download a track to Apollo using youtube-dl
# usage: apollo-dl <path> [-c | URL]
# when -c is used, the URL to download will be fetched from the X selection

set -e

if test -z "$APOLLO_BASE_URL" ; then
  echo 'Please set the environment variable APOLLO_BASE_URL.' >&2
  echo 'e.g. APOLLO_BASE_URL=https://apollo.example.org/' >&2
  exit 1
fi

HASPATH=0
HASURL=0
P=
URL=
CLIPBOARD=0
IGNORE404=1
ENQUEUE=1

API_VERSION=v1

while (( $# )) ; do
    case "$1" in
        "-c")
            if [ $CLIPBOARD -eq 1 ] ; then
                echo "an explicit URL was set so clipboard mode cannot be " \
                    "used" >&2
                exit 1
            fi
            CLIPBOARD=1
            ;;
        "--no-enqueue")
            ENQUEUE=0
            ;;
        "--enqueue")
            ENQUEUE=1
            ;;
        "--no-ignore-404")
            IGNORE404=0
            ;;
        "--ignore-404")
            IGNORE404=1
            ;;
        *)
            if [ $HASPATH -eq 0 ] ; then
                HASPATH=1
                P="$1"
            elif [ $HASURL -eq 0 ] ; then
                if [ $CLIPBOARD -eq 1 ] ; then
                    echo "clipboard mode was set so an explicit URL cannot " \
                        "be provided" >&2
                    exit 1
                fi
                HASURL=1
                URL="$1"
            else
                echo "unexpected command line argument" >&2
                exit 1
            fi
    esac
    shift
done

if [ $CLIPBOARD -eq 1 ] ; then
    URL="$(xclip -o)"
    echo "URL from clipboard: $URL"
    HASURL=1
fi

if [ $HASPATH -eq 0 -a $HASURL -eq 0 ] ; then
    echo "both a path and a URL are needed" >&2
    exit 1
fi

qs=""

if [ $IGNORE404 -eq 1 ] ; then
    qs="?ignore-404=true"
fi

post() {
  curl --silent --fail -H 'Content-type: application/json' --data "$2" \
    ${APOLLO_BASE_URL}${API_VERSION}$1
}

put() {
  curl --silent -X PUT --fail -H 'Content-type: application/json' --data "$2" \
    ${APOLLO_BASE_URL}${API_VERSION}$1
}

put_() {
  curl -v -X PUT --fail -H 'Content-type: application/json' --data "$2" \
    ${APOLLO_BASE_URL}${API_VERSION}$1
}

overwrite_stderr() {
  echo -en '\r\e[0K' >&2
}

update_progress() {
  local COMPLETE="$1"
  local TOTAL="$2"
  overwrite_stderr
  echo -n "$COMPLETE / $TOTAL" >&2
}

poll_async_progress() {
    while true ; do
        result="$(curl --fail -s "$1")"
        stat="$(echo "$result" | jq -r .status)"

        if [ "$stat" = "running" ] ; then
            num="$(echo "$result" | jq -r .progress.done)"
            total="$(echo "$result" | jq -r .progress.outOf)"
            update_progress "$num" "$total"
        else
            break
        fi
    done
}

echo -n 'Submitting download request... ' >&2

queue="$(
    post "/tracks/add/youtube-dl/async$qs" \
        "{ \"url\": \"$URL\", \"path\": \"$P\" }"
)"
query="$(echo "$queue" | jq -r .query)"
jobId="$(echo "$queue" | jq -r .jobId)"

echo "ok" >&2

echo "Asynchonously downloading..." >&2
poll_async_progress "$query"

echo ''
if [ "$stat" = "failed" ] ; then
    echo "Downloading failed." >&2
    echo "$result" | jq -r '.error.message'
    exit 1
elif [ "$stat" != "complete" ] ; then
    echo "Unknown status." >&2
    exit 1
fi

if [ $ENQUEUE -eq 1 ] ; then
    put '/playlist?position=end_1' "$(echo $result | jq '.result')"
fi

