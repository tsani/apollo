#!/bin/bash

set -e

if test -z "$APOLLO_BASE_URL" ; then
  echo 'Please set the environment variable APOLLO_BASE_URL.' >&2
  echo 'e.g. APOLLO_BASE_URL=https://apollo.example.org' >&2
  exit 1
fi

VERSION=v1
URL=$APOLLO_BASE_URL$VERSION

# transcoding parameters
PARAMS='{ "format": "mp3", "bitrate": { "type": "vbr", "value": 2 }}'

require() {
  local PROG="$1"
  if ! which "$PROG" > /dev/null ; then
    echo "apollo-export requires $PROG" >&2
    exit 1
  fi
}

require jq
require curl
require wc
require wget

get() {
  # echo "GET $1" >&2
  curl --fail --silent $URL$1
}

post() {
  # echo "POST $1" >&2
  curl --fail -H 'Content-type: application/json' --data @<(echo "$2") --silent $URL$1
}

PLAYLIST="$(mktemp)"

cleanup() {
  rm "$PLAYLIST"
}

trap cleanup EXIT

# dump the playlist to a file, and edit that file interactively
get /playlist | jq .tracks[].path > "$PLAYLIST"
$EDITOR "$PLAYLIST"

PLAYLIST_TOTAL=$(cat "$PLAYLIST" | wc -l)

if [ $PLAYLIST_TOTAL -eq 0 ] ; then
    echo 'Nothing to do.'
    exit 0
fi

# sends a transcode request for the track, and prints its trackId
transcode() {
  post /transcode/async "$1"
}

overwrite_stderr() {
  echo -en '\r\e[0K' >&2
}

update_progress() {
  local COMPLETE="$1"
  local TOTAL="$2"
  overwrite_stderr
  echo -n "$COMPLETE / $TOTAL" >&2
}

poll_async_progress() {
    while true ; do
        result="$(curl --fail -s "$1")"
        stat="$(echo "$result" | jq -r .status)"

        if [ "$stat" = "running" ] ; then
            num="$(echo "$result" | jq -r .progress.done)"
            total="$(echo "$result" | jq -r .progress.outOf)"
            update_progress "$num" "$total"
        else
            break
        fi
    done
}

echo 'Transcoding...' >&2

TRANSCODEREQ="$(
    cat "$PLAYLIST" |
    jq -s "map({ params: $PARAMS, source: . })"
)"

queue="$(post /transcode/async "$TRANSCODEREQ")"
query="$(echo "$queue" | jq -r .query)"
jobId="$(echo "$queue" | jq -r .jobId)"

echo "Asynchronously transcoding... (Job id ${jobId})" >&2

poll_async_progress "$query"

if [ "$stat" = "failed" ] ; then
    echo ''
    echo "Transcoding failed." >&2
    exit 1
elif [ "$stat" = "complete" ] ; then
    ARCHIVEREQ="$(
        echo "$result" |
        jq .result |
        jq -c "map({ transParams: $PARAMS, type: \"transcode\", trackId: . })"
    )"
    echo ''
    echo "Transcoding complete." >&2
else
    echo "Unknown status." >&2
    exit 1
fi

queue="$(post /archive/async "$ARCHIVEREQ")"
query="$(echo "$queue" | jq -r .query)"
jobId="$(echo "$queue" | jq -r .jobId)"

echo "Asynchronously archiving... (Job id ${jobId})" >&2
echo '' >&2

poll_async_progress "$query"

if [ "$stat" = "failed" ] ; then
    echo ''
    echo -n "Archiving failed: $(echo "$result" | jq .)" >&2
    exit 1
elif [ "$stat" = "complete" ] ; then
    archiveId="$(echo "$result" | jq -r .result.archiveId)"
    archiveUrl="$(echo "$result" | jq -r .result.archiveUrl)"
    echo ''
    echo "Archiving complete; created archive $archiveId" >&2
    echo "Downloading..." >&2
    wget "$archiveUrl"
else
    echo "Unknown status." >&2
fi
